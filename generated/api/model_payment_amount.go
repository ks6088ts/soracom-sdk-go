/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PaymentAmount Payment amount
type PaymentAmount struct {
	// 通貨
	Currency *string `json:"currency,omitempty"`
	PaymentAmount *float32 `json:"paymentAmount,omitempty"`
	SubTotalAmount *float32 `json:"subTotalAmount,omitempty"`
	// 税額
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// 非課税小計
	TaxFreeSubTotalAmount *float64 `json:"taxFreeSubTotalAmount,omitempty"`
	TaxRate map[string]interface{} `json:"taxRate,omitempty"`
	// 課税小計
	TaxableSubTotalAmount *float64 `json:"taxableSubTotalAmount,omitempty"`
	// 合計額 (税込)
	TotalAmount *float64 `json:"totalAmount,omitempty"`
	// 源泉徴収税額
	WithholdingTaxAmount *float64 `json:"withholdingTaxAmount,omitempty"`
}

// NewPaymentAmount instantiates a new PaymentAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentAmount() *PaymentAmount {
	this := PaymentAmount{}
	return &this
}

// NewPaymentAmountWithDefaults instantiates a new PaymentAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentAmountWithDefaults() *PaymentAmount {
	this := PaymentAmount{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentAmount) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmount) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentAmount) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaymentAmount) SetCurrency(v string) {
	o.Currency = &v
}

// GetPaymentAmount returns the PaymentAmount field value if set, zero value otherwise.
func (o *PaymentAmount) GetPaymentAmount() float32 {
	if o == nil || o.PaymentAmount == nil {
		var ret float32
		return ret
	}
	return *o.PaymentAmount
}

// GetPaymentAmountOk returns a tuple with the PaymentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmount) GetPaymentAmountOk() (*float32, bool) {
	if o == nil || o.PaymentAmount == nil {
		return nil, false
	}
	return o.PaymentAmount, true
}

// HasPaymentAmount returns a boolean if a field has been set.
func (o *PaymentAmount) HasPaymentAmount() bool {
	if o != nil && o.PaymentAmount != nil {
		return true
	}

	return false
}

// SetPaymentAmount gets a reference to the given float32 and assigns it to the PaymentAmount field.
func (o *PaymentAmount) SetPaymentAmount(v float32) {
	o.PaymentAmount = &v
}

// GetSubTotalAmount returns the SubTotalAmount field value if set, zero value otherwise.
func (o *PaymentAmount) GetSubTotalAmount() float32 {
	if o == nil || o.SubTotalAmount == nil {
		var ret float32
		return ret
	}
	return *o.SubTotalAmount
}

// GetSubTotalAmountOk returns a tuple with the SubTotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmount) GetSubTotalAmountOk() (*float32, bool) {
	if o == nil || o.SubTotalAmount == nil {
		return nil, false
	}
	return o.SubTotalAmount, true
}

// HasSubTotalAmount returns a boolean if a field has been set.
func (o *PaymentAmount) HasSubTotalAmount() bool {
	if o != nil && o.SubTotalAmount != nil {
		return true
	}

	return false
}

// SetSubTotalAmount gets a reference to the given float32 and assigns it to the SubTotalAmount field.
func (o *PaymentAmount) SetSubTotalAmount(v float32) {
	o.SubTotalAmount = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *PaymentAmount) GetTaxAmount() float64 {
	if o == nil || o.TaxAmount == nil {
		var ret float64
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmount) GetTaxAmountOk() (*float64, bool) {
	if o == nil || o.TaxAmount == nil {
		return nil, false
	}
	return o.TaxAmount, true
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *PaymentAmount) HasTaxAmount() bool {
	if o != nil && o.TaxAmount != nil {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given float64 and assigns it to the TaxAmount field.
func (o *PaymentAmount) SetTaxAmount(v float64) {
	o.TaxAmount = &v
}

// GetTaxFreeSubTotalAmount returns the TaxFreeSubTotalAmount field value if set, zero value otherwise.
func (o *PaymentAmount) GetTaxFreeSubTotalAmount() float64 {
	if o == nil || o.TaxFreeSubTotalAmount == nil {
		var ret float64
		return ret
	}
	return *o.TaxFreeSubTotalAmount
}

// GetTaxFreeSubTotalAmountOk returns a tuple with the TaxFreeSubTotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmount) GetTaxFreeSubTotalAmountOk() (*float64, bool) {
	if o == nil || o.TaxFreeSubTotalAmount == nil {
		return nil, false
	}
	return o.TaxFreeSubTotalAmount, true
}

// HasTaxFreeSubTotalAmount returns a boolean if a field has been set.
func (o *PaymentAmount) HasTaxFreeSubTotalAmount() bool {
	if o != nil && o.TaxFreeSubTotalAmount != nil {
		return true
	}

	return false
}

// SetTaxFreeSubTotalAmount gets a reference to the given float64 and assigns it to the TaxFreeSubTotalAmount field.
func (o *PaymentAmount) SetTaxFreeSubTotalAmount(v float64) {
	o.TaxFreeSubTotalAmount = &v
}

// GetTaxRate returns the TaxRate field value if set, zero value otherwise.
func (o *PaymentAmount) GetTaxRate() map[string]interface{} {
	if o == nil || o.TaxRate == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.TaxRate
}

// GetTaxRateOk returns a tuple with the TaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmount) GetTaxRateOk() (map[string]interface{}, bool) {
	if o == nil || o.TaxRate == nil {
		return nil, false
	}
	return o.TaxRate, true
}

// HasTaxRate returns a boolean if a field has been set.
func (o *PaymentAmount) HasTaxRate() bool {
	if o != nil && o.TaxRate != nil {
		return true
	}

	return false
}

// SetTaxRate gets a reference to the given map[string]interface{} and assigns it to the TaxRate field.
func (o *PaymentAmount) SetTaxRate(v map[string]interface{}) {
	o.TaxRate = v
}

// GetTaxableSubTotalAmount returns the TaxableSubTotalAmount field value if set, zero value otherwise.
func (o *PaymentAmount) GetTaxableSubTotalAmount() float64 {
	if o == nil || o.TaxableSubTotalAmount == nil {
		var ret float64
		return ret
	}
	return *o.TaxableSubTotalAmount
}

// GetTaxableSubTotalAmountOk returns a tuple with the TaxableSubTotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmount) GetTaxableSubTotalAmountOk() (*float64, bool) {
	if o == nil || o.TaxableSubTotalAmount == nil {
		return nil, false
	}
	return o.TaxableSubTotalAmount, true
}

// HasTaxableSubTotalAmount returns a boolean if a field has been set.
func (o *PaymentAmount) HasTaxableSubTotalAmount() bool {
	if o != nil && o.TaxableSubTotalAmount != nil {
		return true
	}

	return false
}

// SetTaxableSubTotalAmount gets a reference to the given float64 and assigns it to the TaxableSubTotalAmount field.
func (o *PaymentAmount) SetTaxableSubTotalAmount(v float64) {
	o.TaxableSubTotalAmount = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *PaymentAmount) GetTotalAmount() float64 {
	if o == nil || o.TotalAmount == nil {
		var ret float64
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmount) GetTotalAmountOk() (*float64, bool) {
	if o == nil || o.TotalAmount == nil {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *PaymentAmount) HasTotalAmount() bool {
	if o != nil && o.TotalAmount != nil {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given float64 and assigns it to the TotalAmount field.
func (o *PaymentAmount) SetTotalAmount(v float64) {
	o.TotalAmount = &v
}

// GetWithholdingTaxAmount returns the WithholdingTaxAmount field value if set, zero value otherwise.
func (o *PaymentAmount) GetWithholdingTaxAmount() float64 {
	if o == nil || o.WithholdingTaxAmount == nil {
		var ret float64
		return ret
	}
	return *o.WithholdingTaxAmount
}

// GetWithholdingTaxAmountOk returns a tuple with the WithholdingTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmount) GetWithholdingTaxAmountOk() (*float64, bool) {
	if o == nil || o.WithholdingTaxAmount == nil {
		return nil, false
	}
	return o.WithholdingTaxAmount, true
}

// HasWithholdingTaxAmount returns a boolean if a field has been set.
func (o *PaymentAmount) HasWithholdingTaxAmount() bool {
	if o != nil && o.WithholdingTaxAmount != nil {
		return true
	}

	return false
}

// SetWithholdingTaxAmount gets a reference to the given float64 and assigns it to the WithholdingTaxAmount field.
func (o *PaymentAmount) SetWithholdingTaxAmount(v float64) {
	o.WithholdingTaxAmount = &v
}

func (o PaymentAmount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.PaymentAmount != nil {
		toSerialize["paymentAmount"] = o.PaymentAmount
	}
	if o.SubTotalAmount != nil {
		toSerialize["subTotalAmount"] = o.SubTotalAmount
	}
	if o.TaxAmount != nil {
		toSerialize["taxAmount"] = o.TaxAmount
	}
	if o.TaxFreeSubTotalAmount != nil {
		toSerialize["taxFreeSubTotalAmount"] = o.TaxFreeSubTotalAmount
	}
	if o.TaxRate != nil {
		toSerialize["taxRate"] = o.TaxRate
	}
	if o.TaxableSubTotalAmount != nil {
		toSerialize["taxableSubTotalAmount"] = o.TaxableSubTotalAmount
	}
	if o.TotalAmount != nil {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	if o.WithholdingTaxAmount != nil {
		toSerialize["withholdingTaxAmount"] = o.WithholdingTaxAmount
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentAmount struct {
	value *PaymentAmount
	isSet bool
}

func (v NullablePaymentAmount) Get() *PaymentAmount {
	return v.value
}

func (v *NullablePaymentAmount) Set(val *PaymentAmount) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentAmount) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentAmount(val *PaymentAmount) *NullablePaymentAmount {
	return &NullablePaymentAmount{value: val, isSet: true}
}

func (v NullablePaymentAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


