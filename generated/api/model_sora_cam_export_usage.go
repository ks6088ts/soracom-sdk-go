/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SoraCamExportUsage struct for SoraCamExportUsage
type SoraCamExportUsage struct {
	// ソラカメ対応カメラのデバイス ID
	DeviceId *string `json:"deviceId,omitempty"`
	Image *SoraCamImageExportUsage `json:"image,omitempty"`
	// 静止画の残りのエクスポート可能枚数や、録画映像の残りのエクスポート可能時間などを取得した年月 (フォーマット: 'YYYYMM')
	MeteredYearMonth *string `json:"meteredYearMonth,omitempty"`
	Video *SoraCamVideoExportUsage `json:"video,omitempty"`
}

// NewSoraCamExportUsage instantiates a new SoraCamExportUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoraCamExportUsage() *SoraCamExportUsage {
	this := SoraCamExportUsage{}
	return &this
}

// NewSoraCamExportUsageWithDefaults instantiates a new SoraCamExportUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoraCamExportUsageWithDefaults() *SoraCamExportUsage {
	this := SoraCamExportUsage{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *SoraCamExportUsage) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraCamExportUsage) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *SoraCamExportUsage) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *SoraCamExportUsage) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *SoraCamExportUsage) GetImage() SoraCamImageExportUsage {
	if o == nil || o.Image == nil {
		var ret SoraCamImageExportUsage
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraCamExportUsage) GetImageOk() (*SoraCamImageExportUsage, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *SoraCamExportUsage) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given SoraCamImageExportUsage and assigns it to the Image field.
func (o *SoraCamExportUsage) SetImage(v SoraCamImageExportUsage) {
	o.Image = &v
}

// GetMeteredYearMonth returns the MeteredYearMonth field value if set, zero value otherwise.
func (o *SoraCamExportUsage) GetMeteredYearMonth() string {
	if o == nil || o.MeteredYearMonth == nil {
		var ret string
		return ret
	}
	return *o.MeteredYearMonth
}

// GetMeteredYearMonthOk returns a tuple with the MeteredYearMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraCamExportUsage) GetMeteredYearMonthOk() (*string, bool) {
	if o == nil || o.MeteredYearMonth == nil {
		return nil, false
	}
	return o.MeteredYearMonth, true
}

// HasMeteredYearMonth returns a boolean if a field has been set.
func (o *SoraCamExportUsage) HasMeteredYearMonth() bool {
	if o != nil && o.MeteredYearMonth != nil {
		return true
	}

	return false
}

// SetMeteredYearMonth gets a reference to the given string and assigns it to the MeteredYearMonth field.
func (o *SoraCamExportUsage) SetMeteredYearMonth(v string) {
	o.MeteredYearMonth = &v
}

// GetVideo returns the Video field value if set, zero value otherwise.
func (o *SoraCamExportUsage) GetVideo() SoraCamVideoExportUsage {
	if o == nil || o.Video == nil {
		var ret SoraCamVideoExportUsage
		return ret
	}
	return *o.Video
}

// GetVideoOk returns a tuple with the Video field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraCamExportUsage) GetVideoOk() (*SoraCamVideoExportUsage, bool) {
	if o == nil || o.Video == nil {
		return nil, false
	}
	return o.Video, true
}

// HasVideo returns a boolean if a field has been set.
func (o *SoraCamExportUsage) HasVideo() bool {
	if o != nil && o.Video != nil {
		return true
	}

	return false
}

// SetVideo gets a reference to the given SoraCamVideoExportUsage and assigns it to the Video field.
func (o *SoraCamExportUsage) SetVideo(v SoraCamVideoExportUsage) {
	o.Video = &v
}

func (o SoraCamExportUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceId != nil {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.Image != nil {
		toSerialize["image"] = o.Image
	}
	if o.MeteredYearMonth != nil {
		toSerialize["meteredYearMonth"] = o.MeteredYearMonth
	}
	if o.Video != nil {
		toSerialize["video"] = o.Video
	}
	return json.Marshal(toSerialize)
}

type NullableSoraCamExportUsage struct {
	value *SoraCamExportUsage
	isSet bool
}

func (v NullableSoraCamExportUsage) Get() *SoraCamExportUsage {
	return v.value
}

func (v *NullableSoraCamExportUsage) Set(val *SoraCamExportUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableSoraCamExportUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableSoraCamExportUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoraCamExportUsage(val *SoraCamExportUsage) *NullableSoraCamExportUsage {
	return &NullableSoraCamExportUsage{value: val, isSet: true}
}

func (v NullableSoraCamExportUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoraCamExportUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


