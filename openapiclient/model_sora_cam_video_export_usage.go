/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// SoraCamVideoExportUsage struct for SoraCamVideoExportUsage
type SoraCamVideoExportUsage struct {
	// 今月中にエクスポート可能な録画映像の残りの秒数
	RemainingSeconds *int32 `json:"remainingSeconds,omitempty"`
	// 今月消費した動画の視聴可能時間をすべて録画映像でエクスポートしたと仮定した場合の、エクスポート可能な秒数
	UsedSeconds *int32 `json:"usedSeconds,omitempty"`
}

// NewSoraCamVideoExportUsage instantiates a new SoraCamVideoExportUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoraCamVideoExportUsage() *SoraCamVideoExportUsage {
	this := SoraCamVideoExportUsage{}
	return &this
}

// NewSoraCamVideoExportUsageWithDefaults instantiates a new SoraCamVideoExportUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoraCamVideoExportUsageWithDefaults() *SoraCamVideoExportUsage {
	this := SoraCamVideoExportUsage{}
	return &this
}

// GetRemainingSeconds returns the RemainingSeconds field value if set, zero value otherwise.
func (o *SoraCamVideoExportUsage) GetRemainingSeconds() int32 {
	if o == nil || o.RemainingSeconds == nil {
		var ret int32
		return ret
	}
	return *o.RemainingSeconds
}

// GetRemainingSecondsOk returns a tuple with the RemainingSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraCamVideoExportUsage) GetRemainingSecondsOk() (*int32, bool) {
	if o == nil || o.RemainingSeconds == nil {
		return nil, false
	}
	return o.RemainingSeconds, true
}

// HasRemainingSeconds returns a boolean if a field has been set.
func (o *SoraCamVideoExportUsage) HasRemainingSeconds() bool {
	if o != nil && o.RemainingSeconds != nil {
		return true
	}

	return false
}

// SetRemainingSeconds gets a reference to the given int32 and assigns it to the RemainingSeconds field.
func (o *SoraCamVideoExportUsage) SetRemainingSeconds(v int32) {
	o.RemainingSeconds = &v
}

// GetUsedSeconds returns the UsedSeconds field value if set, zero value otherwise.
func (o *SoraCamVideoExportUsage) GetUsedSeconds() int32 {
	if o == nil || o.UsedSeconds == nil {
		var ret int32
		return ret
	}
	return *o.UsedSeconds
}

// GetUsedSecondsOk returns a tuple with the UsedSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraCamVideoExportUsage) GetUsedSecondsOk() (*int32, bool) {
	if o == nil || o.UsedSeconds == nil {
		return nil, false
	}
	return o.UsedSeconds, true
}

// HasUsedSeconds returns a boolean if a field has been set.
func (o *SoraCamVideoExportUsage) HasUsedSeconds() bool {
	if o != nil && o.UsedSeconds != nil {
		return true
	}

	return false
}

// SetUsedSeconds gets a reference to the given int32 and assigns it to the UsedSeconds field.
func (o *SoraCamVideoExportUsage) SetUsedSeconds(v int32) {
	o.UsedSeconds = &v
}

func (o SoraCamVideoExportUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RemainingSeconds != nil {
		toSerialize["remainingSeconds"] = o.RemainingSeconds
	}
	if o.UsedSeconds != nil {
		toSerialize["usedSeconds"] = o.UsedSeconds
	}
	return json.Marshal(toSerialize)
}

type NullableSoraCamVideoExportUsage struct {
	value *SoraCamVideoExportUsage
	isSet bool
}

func (v NullableSoraCamVideoExportUsage) Get() *SoraCamVideoExportUsage {
	return v.value
}

func (v *NullableSoraCamVideoExportUsage) Set(val *SoraCamVideoExportUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableSoraCamVideoExportUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableSoraCamVideoExportUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoraCamVideoExportUsage(val *SoraCamVideoExportUsage) *NullableSoraCamVideoExportUsage {
	return &NullableSoraCamVideoExportUsage{value: val, isSet: true}
}

func (v NullableSoraCamVideoExportUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoraCamVideoExportUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


