/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
	"fmt"
)

// FunnelConfigurationDestination - struct for FunnelConfigurationDestination
type FunnelConfigurationDestination struct {
	FunnelAWSFirehoseDestination *FunnelAWSFirehoseDestination
	FunnelAWSIoTDestination *FunnelAWSIoTDestination
	FunnelAWSKinesisDestination *FunnelAWSKinesisDestination
	FunnelAcroquestTorrentioDestination *FunnelAcroquestTorrentioDestination
	FunnelAppressoDataSpiderDestination *FunnelAppressoDataSpiderDestination
	FunnelAzureEventHubDestination *FunnelAzureEventHubDestination
	FunnelBrainsTechImpulseDestination *FunnelBrainsTechImpulseDestination
	FunnelDestination *FunnelDestination
	FunnelEsrijArcgisOnlineDestination *FunnelEsrijArcgisOnlineDestination
	FunnelFusicMockmockDatarecorderDestination *FunnelFusicMockmockDatarecorderDestination
	FunnelGooglePubSubDestination *FunnelGooglePubSubDestination
	FunnelInfoteriaPlatioDestination *FunnelInfoteriaPlatioDestination
	FunnelKiiThingifDestination *FunnelKiiThingifDestination
	FunnelLandlogDestination *FunnelLandlogDestination
	FunnelOptimCloudiotosDestination *FunnelOptimCloudiotosDestination
	FunnelSensorCorpusDestination *FunnelSensorCorpusDestination
	FunnelTeradataIntellicloudDestination *FunnelTeradataIntellicloudDestination
	FunnelWingarcMotionboardDestination *FunnelWingarcMotionboardDestination
	FunnelYaskawaMmcloudDestination *FunnelYaskawaMmcloudDestination
}

// FunnelAWSFirehoseDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelAWSFirehoseDestination wrapped in FunnelConfigurationDestination
func FunnelAWSFirehoseDestinationAsFunnelConfigurationDestination(v *FunnelAWSFirehoseDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelAWSFirehoseDestination: v,
	}
}

// FunnelAWSIoTDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelAWSIoTDestination wrapped in FunnelConfigurationDestination
func FunnelAWSIoTDestinationAsFunnelConfigurationDestination(v *FunnelAWSIoTDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelAWSIoTDestination: v,
	}
}

// FunnelAWSKinesisDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelAWSKinesisDestination wrapped in FunnelConfigurationDestination
func FunnelAWSKinesisDestinationAsFunnelConfigurationDestination(v *FunnelAWSKinesisDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelAWSKinesisDestination: v,
	}
}

// FunnelAcroquestTorrentioDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelAcroquestTorrentioDestination wrapped in FunnelConfigurationDestination
func FunnelAcroquestTorrentioDestinationAsFunnelConfigurationDestination(v *FunnelAcroquestTorrentioDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelAcroquestTorrentioDestination: v,
	}
}

// FunnelAppressoDataSpiderDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelAppressoDataSpiderDestination wrapped in FunnelConfigurationDestination
func FunnelAppressoDataSpiderDestinationAsFunnelConfigurationDestination(v *FunnelAppressoDataSpiderDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelAppressoDataSpiderDestination: v,
	}
}

// FunnelAzureEventHubDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelAzureEventHubDestination wrapped in FunnelConfigurationDestination
func FunnelAzureEventHubDestinationAsFunnelConfigurationDestination(v *FunnelAzureEventHubDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelAzureEventHubDestination: v,
	}
}

// FunnelBrainsTechImpulseDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelBrainsTechImpulseDestination wrapped in FunnelConfigurationDestination
func FunnelBrainsTechImpulseDestinationAsFunnelConfigurationDestination(v *FunnelBrainsTechImpulseDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelBrainsTechImpulseDestination: v,
	}
}

// FunnelDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelDestination wrapped in FunnelConfigurationDestination
func FunnelDestinationAsFunnelConfigurationDestination(v *FunnelDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelDestination: v,
	}
}

// FunnelEsrijArcgisOnlineDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelEsrijArcgisOnlineDestination wrapped in FunnelConfigurationDestination
func FunnelEsrijArcgisOnlineDestinationAsFunnelConfigurationDestination(v *FunnelEsrijArcgisOnlineDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelEsrijArcgisOnlineDestination: v,
	}
}

// FunnelFusicMockmockDatarecorderDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelFusicMockmockDatarecorderDestination wrapped in FunnelConfigurationDestination
func FunnelFusicMockmockDatarecorderDestinationAsFunnelConfigurationDestination(v *FunnelFusicMockmockDatarecorderDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelFusicMockmockDatarecorderDestination: v,
	}
}

// FunnelGooglePubSubDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelGooglePubSubDestination wrapped in FunnelConfigurationDestination
func FunnelGooglePubSubDestinationAsFunnelConfigurationDestination(v *FunnelGooglePubSubDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelGooglePubSubDestination: v,
	}
}

// FunnelInfoteriaPlatioDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelInfoteriaPlatioDestination wrapped in FunnelConfigurationDestination
func FunnelInfoteriaPlatioDestinationAsFunnelConfigurationDestination(v *FunnelInfoteriaPlatioDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelInfoteriaPlatioDestination: v,
	}
}

// FunnelKiiThingifDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelKiiThingifDestination wrapped in FunnelConfigurationDestination
func FunnelKiiThingifDestinationAsFunnelConfigurationDestination(v *FunnelKiiThingifDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelKiiThingifDestination: v,
	}
}

// FunnelLandlogDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelLandlogDestination wrapped in FunnelConfigurationDestination
func FunnelLandlogDestinationAsFunnelConfigurationDestination(v *FunnelLandlogDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelLandlogDestination: v,
	}
}

// FunnelOptimCloudiotosDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelOptimCloudiotosDestination wrapped in FunnelConfigurationDestination
func FunnelOptimCloudiotosDestinationAsFunnelConfigurationDestination(v *FunnelOptimCloudiotosDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelOptimCloudiotosDestination: v,
	}
}

// FunnelSensorCorpusDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelSensorCorpusDestination wrapped in FunnelConfigurationDestination
func FunnelSensorCorpusDestinationAsFunnelConfigurationDestination(v *FunnelSensorCorpusDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelSensorCorpusDestination: v,
	}
}

// FunnelTeradataIntellicloudDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelTeradataIntellicloudDestination wrapped in FunnelConfigurationDestination
func FunnelTeradataIntellicloudDestinationAsFunnelConfigurationDestination(v *FunnelTeradataIntellicloudDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelTeradataIntellicloudDestination: v,
	}
}

// FunnelWingarcMotionboardDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelWingarcMotionboardDestination wrapped in FunnelConfigurationDestination
func FunnelWingarcMotionboardDestinationAsFunnelConfigurationDestination(v *FunnelWingarcMotionboardDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelWingarcMotionboardDestination: v,
	}
}

// FunnelYaskawaMmcloudDestinationAsFunnelConfigurationDestination is a convenience function that returns FunnelYaskawaMmcloudDestination wrapped in FunnelConfigurationDestination
func FunnelYaskawaMmcloudDestinationAsFunnelConfigurationDestination(v *FunnelYaskawaMmcloudDestination) FunnelConfigurationDestination {
	return FunnelConfigurationDestination{
		FunnelYaskawaMmcloudDestination: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FunnelConfigurationDestination) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FunnelAWSFirehoseDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelAWSFirehoseDestination)
	if err == nil {
		jsonFunnelAWSFirehoseDestination, _ := json.Marshal(dst.FunnelAWSFirehoseDestination)
		if string(jsonFunnelAWSFirehoseDestination) == "{}" { // empty struct
			dst.FunnelAWSFirehoseDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelAWSFirehoseDestination = nil
	}

	// try to unmarshal data into FunnelAWSIoTDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelAWSIoTDestination)
	if err == nil {
		jsonFunnelAWSIoTDestination, _ := json.Marshal(dst.FunnelAWSIoTDestination)
		if string(jsonFunnelAWSIoTDestination) == "{}" { // empty struct
			dst.FunnelAWSIoTDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelAWSIoTDestination = nil
	}

	// try to unmarshal data into FunnelAWSKinesisDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelAWSKinesisDestination)
	if err == nil {
		jsonFunnelAWSKinesisDestination, _ := json.Marshal(dst.FunnelAWSKinesisDestination)
		if string(jsonFunnelAWSKinesisDestination) == "{}" { // empty struct
			dst.FunnelAWSKinesisDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelAWSKinesisDestination = nil
	}

	// try to unmarshal data into FunnelAcroquestTorrentioDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelAcroquestTorrentioDestination)
	if err == nil {
		jsonFunnelAcroquestTorrentioDestination, _ := json.Marshal(dst.FunnelAcroquestTorrentioDestination)
		if string(jsonFunnelAcroquestTorrentioDestination) == "{}" { // empty struct
			dst.FunnelAcroquestTorrentioDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelAcroquestTorrentioDestination = nil
	}

	// try to unmarshal data into FunnelAppressoDataSpiderDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelAppressoDataSpiderDestination)
	if err == nil {
		jsonFunnelAppressoDataSpiderDestination, _ := json.Marshal(dst.FunnelAppressoDataSpiderDestination)
		if string(jsonFunnelAppressoDataSpiderDestination) == "{}" { // empty struct
			dst.FunnelAppressoDataSpiderDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelAppressoDataSpiderDestination = nil
	}

	// try to unmarshal data into FunnelAzureEventHubDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelAzureEventHubDestination)
	if err == nil {
		jsonFunnelAzureEventHubDestination, _ := json.Marshal(dst.FunnelAzureEventHubDestination)
		if string(jsonFunnelAzureEventHubDestination) == "{}" { // empty struct
			dst.FunnelAzureEventHubDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelAzureEventHubDestination = nil
	}

	// try to unmarshal data into FunnelBrainsTechImpulseDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelBrainsTechImpulseDestination)
	if err == nil {
		jsonFunnelBrainsTechImpulseDestination, _ := json.Marshal(dst.FunnelBrainsTechImpulseDestination)
		if string(jsonFunnelBrainsTechImpulseDestination) == "{}" { // empty struct
			dst.FunnelBrainsTechImpulseDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelBrainsTechImpulseDestination = nil
	}

	// try to unmarshal data into FunnelDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelDestination)
	if err == nil {
		jsonFunnelDestination, _ := json.Marshal(dst.FunnelDestination)
		if string(jsonFunnelDestination) == "{}" { // empty struct
			dst.FunnelDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelDestination = nil
	}

	// try to unmarshal data into FunnelEsrijArcgisOnlineDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelEsrijArcgisOnlineDestination)
	if err == nil {
		jsonFunnelEsrijArcgisOnlineDestination, _ := json.Marshal(dst.FunnelEsrijArcgisOnlineDestination)
		if string(jsonFunnelEsrijArcgisOnlineDestination) == "{}" { // empty struct
			dst.FunnelEsrijArcgisOnlineDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelEsrijArcgisOnlineDestination = nil
	}

	// try to unmarshal data into FunnelFusicMockmockDatarecorderDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelFusicMockmockDatarecorderDestination)
	if err == nil {
		jsonFunnelFusicMockmockDatarecorderDestination, _ := json.Marshal(dst.FunnelFusicMockmockDatarecorderDestination)
		if string(jsonFunnelFusicMockmockDatarecorderDestination) == "{}" { // empty struct
			dst.FunnelFusicMockmockDatarecorderDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelFusicMockmockDatarecorderDestination = nil
	}

	// try to unmarshal data into FunnelGooglePubSubDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelGooglePubSubDestination)
	if err == nil {
		jsonFunnelGooglePubSubDestination, _ := json.Marshal(dst.FunnelGooglePubSubDestination)
		if string(jsonFunnelGooglePubSubDestination) == "{}" { // empty struct
			dst.FunnelGooglePubSubDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelGooglePubSubDestination = nil
	}

	// try to unmarshal data into FunnelInfoteriaPlatioDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelInfoteriaPlatioDestination)
	if err == nil {
		jsonFunnelInfoteriaPlatioDestination, _ := json.Marshal(dst.FunnelInfoteriaPlatioDestination)
		if string(jsonFunnelInfoteriaPlatioDestination) == "{}" { // empty struct
			dst.FunnelInfoteriaPlatioDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelInfoteriaPlatioDestination = nil
	}

	// try to unmarshal data into FunnelKiiThingifDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelKiiThingifDestination)
	if err == nil {
		jsonFunnelKiiThingifDestination, _ := json.Marshal(dst.FunnelKiiThingifDestination)
		if string(jsonFunnelKiiThingifDestination) == "{}" { // empty struct
			dst.FunnelKiiThingifDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelKiiThingifDestination = nil
	}

	// try to unmarshal data into FunnelLandlogDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelLandlogDestination)
	if err == nil {
		jsonFunnelLandlogDestination, _ := json.Marshal(dst.FunnelLandlogDestination)
		if string(jsonFunnelLandlogDestination) == "{}" { // empty struct
			dst.FunnelLandlogDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelLandlogDestination = nil
	}

	// try to unmarshal data into FunnelOptimCloudiotosDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelOptimCloudiotosDestination)
	if err == nil {
		jsonFunnelOptimCloudiotosDestination, _ := json.Marshal(dst.FunnelOptimCloudiotosDestination)
		if string(jsonFunnelOptimCloudiotosDestination) == "{}" { // empty struct
			dst.FunnelOptimCloudiotosDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelOptimCloudiotosDestination = nil
	}

	// try to unmarshal data into FunnelSensorCorpusDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelSensorCorpusDestination)
	if err == nil {
		jsonFunnelSensorCorpusDestination, _ := json.Marshal(dst.FunnelSensorCorpusDestination)
		if string(jsonFunnelSensorCorpusDestination) == "{}" { // empty struct
			dst.FunnelSensorCorpusDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelSensorCorpusDestination = nil
	}

	// try to unmarshal data into FunnelTeradataIntellicloudDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelTeradataIntellicloudDestination)
	if err == nil {
		jsonFunnelTeradataIntellicloudDestination, _ := json.Marshal(dst.FunnelTeradataIntellicloudDestination)
		if string(jsonFunnelTeradataIntellicloudDestination) == "{}" { // empty struct
			dst.FunnelTeradataIntellicloudDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelTeradataIntellicloudDestination = nil
	}

	// try to unmarshal data into FunnelWingarcMotionboardDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelWingarcMotionboardDestination)
	if err == nil {
		jsonFunnelWingarcMotionboardDestination, _ := json.Marshal(dst.FunnelWingarcMotionboardDestination)
		if string(jsonFunnelWingarcMotionboardDestination) == "{}" { // empty struct
			dst.FunnelWingarcMotionboardDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelWingarcMotionboardDestination = nil
	}

	// try to unmarshal data into FunnelYaskawaMmcloudDestination
	err = newStrictDecoder(data).Decode(&dst.FunnelYaskawaMmcloudDestination)
	if err == nil {
		jsonFunnelYaskawaMmcloudDestination, _ := json.Marshal(dst.FunnelYaskawaMmcloudDestination)
		if string(jsonFunnelYaskawaMmcloudDestination) == "{}" { // empty struct
			dst.FunnelYaskawaMmcloudDestination = nil
		} else {
			match++
		}
	} else {
		dst.FunnelYaskawaMmcloudDestination = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FunnelAWSFirehoseDestination = nil
		dst.FunnelAWSIoTDestination = nil
		dst.FunnelAWSKinesisDestination = nil
		dst.FunnelAcroquestTorrentioDestination = nil
		dst.FunnelAppressoDataSpiderDestination = nil
		dst.FunnelAzureEventHubDestination = nil
		dst.FunnelBrainsTechImpulseDestination = nil
		dst.FunnelDestination = nil
		dst.FunnelEsrijArcgisOnlineDestination = nil
		dst.FunnelFusicMockmockDatarecorderDestination = nil
		dst.FunnelGooglePubSubDestination = nil
		dst.FunnelInfoteriaPlatioDestination = nil
		dst.FunnelKiiThingifDestination = nil
		dst.FunnelLandlogDestination = nil
		dst.FunnelOptimCloudiotosDestination = nil
		dst.FunnelSensorCorpusDestination = nil
		dst.FunnelTeradataIntellicloudDestination = nil
		dst.FunnelWingarcMotionboardDestination = nil
		dst.FunnelYaskawaMmcloudDestination = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(FunnelConfigurationDestination)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(FunnelConfigurationDestination)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FunnelConfigurationDestination) MarshalJSON() ([]byte, error) {
	if src.FunnelAWSFirehoseDestination != nil {
		return json.Marshal(&src.FunnelAWSFirehoseDestination)
	}

	if src.FunnelAWSIoTDestination != nil {
		return json.Marshal(&src.FunnelAWSIoTDestination)
	}

	if src.FunnelAWSKinesisDestination != nil {
		return json.Marshal(&src.FunnelAWSKinesisDestination)
	}

	if src.FunnelAcroquestTorrentioDestination != nil {
		return json.Marshal(&src.FunnelAcroquestTorrentioDestination)
	}

	if src.FunnelAppressoDataSpiderDestination != nil {
		return json.Marshal(&src.FunnelAppressoDataSpiderDestination)
	}

	if src.FunnelAzureEventHubDestination != nil {
		return json.Marshal(&src.FunnelAzureEventHubDestination)
	}

	if src.FunnelBrainsTechImpulseDestination != nil {
		return json.Marshal(&src.FunnelBrainsTechImpulseDestination)
	}

	if src.FunnelDestination != nil {
		return json.Marshal(&src.FunnelDestination)
	}

	if src.FunnelEsrijArcgisOnlineDestination != nil {
		return json.Marshal(&src.FunnelEsrijArcgisOnlineDestination)
	}

	if src.FunnelFusicMockmockDatarecorderDestination != nil {
		return json.Marshal(&src.FunnelFusicMockmockDatarecorderDestination)
	}

	if src.FunnelGooglePubSubDestination != nil {
		return json.Marshal(&src.FunnelGooglePubSubDestination)
	}

	if src.FunnelInfoteriaPlatioDestination != nil {
		return json.Marshal(&src.FunnelInfoteriaPlatioDestination)
	}

	if src.FunnelKiiThingifDestination != nil {
		return json.Marshal(&src.FunnelKiiThingifDestination)
	}

	if src.FunnelLandlogDestination != nil {
		return json.Marshal(&src.FunnelLandlogDestination)
	}

	if src.FunnelOptimCloudiotosDestination != nil {
		return json.Marshal(&src.FunnelOptimCloudiotosDestination)
	}

	if src.FunnelSensorCorpusDestination != nil {
		return json.Marshal(&src.FunnelSensorCorpusDestination)
	}

	if src.FunnelTeradataIntellicloudDestination != nil {
		return json.Marshal(&src.FunnelTeradataIntellicloudDestination)
	}

	if src.FunnelWingarcMotionboardDestination != nil {
		return json.Marshal(&src.FunnelWingarcMotionboardDestination)
	}

	if src.FunnelYaskawaMmcloudDestination != nil {
		return json.Marshal(&src.FunnelYaskawaMmcloudDestination)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FunnelConfigurationDestination) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FunnelAWSFirehoseDestination != nil {
		return obj.FunnelAWSFirehoseDestination
	}

	if obj.FunnelAWSIoTDestination != nil {
		return obj.FunnelAWSIoTDestination
	}

	if obj.FunnelAWSKinesisDestination != nil {
		return obj.FunnelAWSKinesisDestination
	}

	if obj.FunnelAcroquestTorrentioDestination != nil {
		return obj.FunnelAcroquestTorrentioDestination
	}

	if obj.FunnelAppressoDataSpiderDestination != nil {
		return obj.FunnelAppressoDataSpiderDestination
	}

	if obj.FunnelAzureEventHubDestination != nil {
		return obj.FunnelAzureEventHubDestination
	}

	if obj.FunnelBrainsTechImpulseDestination != nil {
		return obj.FunnelBrainsTechImpulseDestination
	}

	if obj.FunnelDestination != nil {
		return obj.FunnelDestination
	}

	if obj.FunnelEsrijArcgisOnlineDestination != nil {
		return obj.FunnelEsrijArcgisOnlineDestination
	}

	if obj.FunnelFusicMockmockDatarecorderDestination != nil {
		return obj.FunnelFusicMockmockDatarecorderDestination
	}

	if obj.FunnelGooglePubSubDestination != nil {
		return obj.FunnelGooglePubSubDestination
	}

	if obj.FunnelInfoteriaPlatioDestination != nil {
		return obj.FunnelInfoteriaPlatioDestination
	}

	if obj.FunnelKiiThingifDestination != nil {
		return obj.FunnelKiiThingifDestination
	}

	if obj.FunnelLandlogDestination != nil {
		return obj.FunnelLandlogDestination
	}

	if obj.FunnelOptimCloudiotosDestination != nil {
		return obj.FunnelOptimCloudiotosDestination
	}

	if obj.FunnelSensorCorpusDestination != nil {
		return obj.FunnelSensorCorpusDestination
	}

	if obj.FunnelTeradataIntellicloudDestination != nil {
		return obj.FunnelTeradataIntellicloudDestination
	}

	if obj.FunnelWingarcMotionboardDestination != nil {
		return obj.FunnelWingarcMotionboardDestination
	}

	if obj.FunnelYaskawaMmcloudDestination != nil {
		return obj.FunnelYaskawaMmcloudDestination
	}

	// all schemas are nil
	return nil
}

type NullableFunnelConfigurationDestination struct {
	value *FunnelConfigurationDestination
	isSet bool
}

func (v NullableFunnelConfigurationDestination) Get() *FunnelConfigurationDestination {
	return v.value
}

func (v *NullableFunnelConfigurationDestination) Set(val *FunnelConfigurationDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableFunnelConfigurationDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableFunnelConfigurationDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunnelConfigurationDestination(val *FunnelConfigurationDestination) *NullableFunnelConfigurationDestination {
	return &NullableFunnelConfigurationDestination{value: val, isSet: true}
}

func (v NullableFunnelConfigurationDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunnelConfigurationDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


