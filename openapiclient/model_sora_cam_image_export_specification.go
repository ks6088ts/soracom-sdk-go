/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// SoraCamImageExportSpecification struct for SoraCamImageExportSpecification
type SoraCamImageExportSpecification struct {
	// エクスポートした静止画に適用するフィルタ
	ImageFilters []string `json:"imageFilters,omitempty"`
	// エクスポート対象の時刻 (UNIX 時間 (ミリ秒))。指定した時刻に撮影された録画映像から静止画がエクスポートされます。
	Time int64 `json:"time"`
}

// NewSoraCamImageExportSpecification instantiates a new SoraCamImageExportSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoraCamImageExportSpecification(time int64) *SoraCamImageExportSpecification {
	this := SoraCamImageExportSpecification{}
	this.Time = time
	return &this
}

// NewSoraCamImageExportSpecificationWithDefaults instantiates a new SoraCamImageExportSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoraCamImageExportSpecificationWithDefaults() *SoraCamImageExportSpecification {
	this := SoraCamImageExportSpecification{}
	return &this
}

// GetImageFilters returns the ImageFilters field value if set, zero value otherwise.
func (o *SoraCamImageExportSpecification) GetImageFilters() []string {
	if o == nil || o.ImageFilters == nil {
		var ret []string
		return ret
	}
	return o.ImageFilters
}

// GetImageFiltersOk returns a tuple with the ImageFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraCamImageExportSpecification) GetImageFiltersOk() ([]string, bool) {
	if o == nil || o.ImageFilters == nil {
		return nil, false
	}
	return o.ImageFilters, true
}

// HasImageFilters returns a boolean if a field has been set.
func (o *SoraCamImageExportSpecification) HasImageFilters() bool {
	if o != nil && o.ImageFilters != nil {
		return true
	}

	return false
}

// SetImageFilters gets a reference to the given []string and assigns it to the ImageFilters field.
func (o *SoraCamImageExportSpecification) SetImageFilters(v []string) {
	o.ImageFilters = v
}

// GetTime returns the Time field value
func (o *SoraCamImageExportSpecification) GetTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *SoraCamImageExportSpecification) GetTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *SoraCamImageExportSpecification) SetTime(v int64) {
	o.Time = v
}

func (o SoraCamImageExportSpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImageFilters != nil {
		toSerialize["imageFilters"] = o.ImageFilters
	}
	if true {
		toSerialize["time"] = o.Time
	}
	return json.Marshal(toSerialize)
}

type NullableSoraCamImageExportSpecification struct {
	value *SoraCamImageExportSpecification
	isSet bool
}

func (v NullableSoraCamImageExportSpecification) Get() *SoraCamImageExportSpecification {
	return v.value
}

func (v *NullableSoraCamImageExportSpecification) Set(val *SoraCamImageExportSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableSoraCamImageExportSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableSoraCamImageExportSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoraCamImageExportSpecification(val *SoraCamImageExportSpecification) *NullableSoraCamImageExportSpecification {
	return &NullableSoraCamImageExportSpecification{value: val, isSet: true}
}

func (v NullableSoraCamImageExportSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoraCamImageExportSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


