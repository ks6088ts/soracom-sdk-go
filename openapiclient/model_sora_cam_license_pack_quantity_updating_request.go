/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// SoraCamLicensePackQuantityUpdatingRequest struct for SoraCamLicensePackQuantityUpdatingRequest
type SoraCamLicensePackQuantityUpdatingRequest struct {
	// 現在のライセンス数
	CurrentQuantity *int32 `json:"currentQuantity,omitempty"`
	// 変更後のライセンス数
	DesiredQuantity *int32 `json:"desiredQuantity,omitempty"`
}

// NewSoraCamLicensePackQuantityUpdatingRequest instantiates a new SoraCamLicensePackQuantityUpdatingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoraCamLicensePackQuantityUpdatingRequest() *SoraCamLicensePackQuantityUpdatingRequest {
	this := SoraCamLicensePackQuantityUpdatingRequest{}
	return &this
}

// NewSoraCamLicensePackQuantityUpdatingRequestWithDefaults instantiates a new SoraCamLicensePackQuantityUpdatingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoraCamLicensePackQuantityUpdatingRequestWithDefaults() *SoraCamLicensePackQuantityUpdatingRequest {
	this := SoraCamLicensePackQuantityUpdatingRequest{}
	return &this
}

// GetCurrentQuantity returns the CurrentQuantity field value if set, zero value otherwise.
func (o *SoraCamLicensePackQuantityUpdatingRequest) GetCurrentQuantity() int32 {
	if o == nil || o.CurrentQuantity == nil {
		var ret int32
		return ret
	}
	return *o.CurrentQuantity
}

// GetCurrentQuantityOk returns a tuple with the CurrentQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraCamLicensePackQuantityUpdatingRequest) GetCurrentQuantityOk() (*int32, bool) {
	if o == nil || o.CurrentQuantity == nil {
		return nil, false
	}
	return o.CurrentQuantity, true
}

// HasCurrentQuantity returns a boolean if a field has been set.
func (o *SoraCamLicensePackQuantityUpdatingRequest) HasCurrentQuantity() bool {
	if o != nil && o.CurrentQuantity != nil {
		return true
	}

	return false
}

// SetCurrentQuantity gets a reference to the given int32 and assigns it to the CurrentQuantity field.
func (o *SoraCamLicensePackQuantityUpdatingRequest) SetCurrentQuantity(v int32) {
	o.CurrentQuantity = &v
}

// GetDesiredQuantity returns the DesiredQuantity field value if set, zero value otherwise.
func (o *SoraCamLicensePackQuantityUpdatingRequest) GetDesiredQuantity() int32 {
	if o == nil || o.DesiredQuantity == nil {
		var ret int32
		return ret
	}
	return *o.DesiredQuantity
}

// GetDesiredQuantityOk returns a tuple with the DesiredQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraCamLicensePackQuantityUpdatingRequest) GetDesiredQuantityOk() (*int32, bool) {
	if o == nil || o.DesiredQuantity == nil {
		return nil, false
	}
	return o.DesiredQuantity, true
}

// HasDesiredQuantity returns a boolean if a field has been set.
func (o *SoraCamLicensePackQuantityUpdatingRequest) HasDesiredQuantity() bool {
	if o != nil && o.DesiredQuantity != nil {
		return true
	}

	return false
}

// SetDesiredQuantity gets a reference to the given int32 and assigns it to the DesiredQuantity field.
func (o *SoraCamLicensePackQuantityUpdatingRequest) SetDesiredQuantity(v int32) {
	o.DesiredQuantity = &v
}

func (o SoraCamLicensePackQuantityUpdatingRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentQuantity != nil {
		toSerialize["currentQuantity"] = o.CurrentQuantity
	}
	if o.DesiredQuantity != nil {
		toSerialize["desiredQuantity"] = o.DesiredQuantity
	}
	return json.Marshal(toSerialize)
}

type NullableSoraCamLicensePackQuantityUpdatingRequest struct {
	value *SoraCamLicensePackQuantityUpdatingRequest
	isSet bool
}

func (v NullableSoraCamLicensePackQuantityUpdatingRequest) Get() *SoraCamLicensePackQuantityUpdatingRequest {
	return v.value
}

func (v *NullableSoraCamLicensePackQuantityUpdatingRequest) Set(val *SoraCamLicensePackQuantityUpdatingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSoraCamLicensePackQuantityUpdatingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSoraCamLicensePackQuantityUpdatingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoraCamLicensePackQuantityUpdatingRequest(val *SoraCamLicensePackQuantityUpdatingRequest) *NullableSoraCamLicensePackQuantityUpdatingRequest {
	return &NullableSoraCamLicensePackQuantityUpdatingRequest{value: val, isSet: true}
}

func (v NullableSoraCamLicensePackQuantityUpdatingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoraCamLicensePackQuantityUpdatingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


